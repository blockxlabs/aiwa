import sinon from 'sinon';
import { keccak512 } from 'js-sha3';
import CryptoJS from 'crypto-js';
import jc from 'json-cycle';
import { readFileSync } from 'fs';
import _ from 'lodash';
import * as browserService from '../../../app/services/browserService';
import * as VaultService from '../../../app/services/vaultService';
import * as hdwallet from '../../../app/apis/wallet/hdwallet';
//{ getLocalStorage, setLocalStorage, sendMessage }
const assert = require('assert');

const updatekeyExpected = {
  result: 'updateKey',
  data:
    'a4c4d5ba6b258360c11943470ac3ea02fa9f365f5c963882f156551bb9ec167ca0f2f62352038bc0abe812d3983cce3b8d953db75332519194c48d98cf986fc1',
};
// dummy data -- this is not decrypting, giving Malform UTF - 8 error
// eslint-disable-next-line quotes
const dummyVault = '{"$super":{"$super":{}},"ciphertext":{"words":[-2094926407,228349556,1098442913,415498187,-1077297473,1193417146,-1904340134,381984220,1140905011,1231445811,1937522783,156632263,-1927966511,-300412621,-606449713,314834731,-668847593,155410965,1371225790,-2004310918,921872406,-480151812,187270054,-602255091,1242460096,397049451,947396014,443124144,-710781001,-1441840018,-197565791,-987065774,363745047,541992631,414507860,-470909141,1017639778,526254226,126247507,-1425089533,1504615482,-1750905649,1962742781,-512814455,1625528664,1347698821,-1453547325,-91937041,-697815651,713714066,875464068,-1306917834,-966933659,-1123201841,-1342713131,1887294694,-1511743548,-473319085,-178012078,1219068147,-651118732,498013125,-5395630,150903883,2140556483,-1105215203,-1030363023,-2067579142,2024929156,795038827,-1095100736,1077106917,400911556,-751587875,129788632,-745931547,1301633438,317024530,850446033,43458025,-1920504960,-1369436449,-1007230488,917612531,1174214710,-958896734,-799759801,-1639624045,799672058,-1136839788,-1092342574,882031335,60294374,83584264,-1668317895,875138944,-415509068,131122586,-1676250684,1099804095,335304926,1260476365,-1922175079,-1018117176,302922235,-1247366086,1246153096,728061908,-182531091,820415418,-899600388,-508777535,-1395126924,247311419,1681563237,1229289556,1603935016,-60606414,-608291498,-1546766363,1271644946,606032188,-550908703,369133753,2048381124,561257685,414216083,499300263,228499596,-718848277,309396063,-1019841867,58327256,2142717961,-969160882,1990947024,-1355399790,654909860,1288158027,-83549214,-1859773474,1951608683,-534271291,-244323915,562360113,1982038694,486465567,1307188901,-1454909562,-1360323210,1409952007,-312679614,971429202,1977463908,-176563078,-1133605586,-384336489,-265029371,-1340794867,-872480076,-436985017,-250917232,1826018988,1783479320,1261397897,-887708296,-1585323618,-838717827,-1337500705,-1596835343,-871411900,804710673,1353688347,-1409627354,1357279241,-1815643825,-789365407,85571311,260793555,883596709,-876637258,77020092,-1531606331,-2120786013,203374633,318534486,-692910903,1133735659,61214280,212656728,-679415254,-1074514163,1593891709,1253231092,-664892058,1383215737,679395135,1534504510,709795317,-913257698,-1803861687,-2113477858,109524699,-1200241843,-767971086,-685879224,-996463121,1007104806,949210093,721308756,324269552,-1497699082,596204718,321477017,-376268641,1855641729,-2141674608,1772675667,-328386205,-313088922,1404355325,-2085372987,837163445,-1100157327],"sigBytes":896},"key":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"words":[-233281367,-1595773699,-1376940624,-28021264,1710399267,182845716,-384786586,-2139552198,119555548,1649214594,-895204969,-1422165124],"sigBytes":32},"iv":{"$super":{"$ref":"$[\\"key\\"][\\"$super\\"]"},"words":[119555548,1649214594,-895204969,-1422165124],"sigBytes":16},"algorithm":{"keySize":8,"$super":{"cfg":{"mode":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"Encryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}},"Decryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}}},"padding":{},"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}},"blockSize":4,"$super":{"cfg":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"$super\\"]"},"keySize":4,"ivSize":4,"_ENC_XFORM_MODE":1,"_DEC_XFORM_MODE":2,"$super":{"_minBufferSize":0,"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}}}},"mode":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"},"padding":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"padding\\"]"},"blockSize":4,"formatter":{},"salt":{"words":[894042598,1834800617],"sigBytes":8}}';
const dummyVault1 = '{"$super":{"$super":{}},"ciphertext":{"words":[-2032712936,1577551069,-527627934,1067185513,-978794137,-2030741029,1514911813,-1942494351,-370055604,1515934505,-1783173438,1838955692,-1956993506,-519292619,-1810809179,-274717768,181211557,-969268073,1745484382,-633106693,706979674,165052475,-1404137020,-1458363590,-459555476,304166759,723676875,1383565149,467586838,1071194423,-874748125,-811878132,1170259478,-980546377,1606448596,-955550864,1944409702,-1244983046,-1673819457,-72768417,682908474,-1912517748,271640569,-405825858,-397516046,2112383301,-169446810,-1916190093,-402004366,2059528536,-1624745074,-1355129934,-658619764,960104262,1155910063,-243504507,-842547675,-653475738,-1118946705,-1291478762,-1826315454,-757357835,1548443349,-1449529754,865684199,1265754572,-2135052902,62407450,563452240,-1526039168,1631966530,648011459,-92143918,310740558,351825647,-1709203680,333795529,1016929032,-795216512,-119185458,1883011217,732477946,62067233,-1057878395,2144916028,-1445547259,181367405,485981621,-1099632696,-1753649917,640328576,-1076001398,1449993341,-432775748,-647376145,-1509555474,-1111379411,1576376791,272764467,-1844741562,972474426,-1627072141,838927134,-1167915741,796870799,-822267116,1698716438,-2117374053,-1551809937,-817733024,-1716967504,1720836889,-205346919,-595933470,-459016704,1874058667,1941751468,-749273130,-1954625203,516754148,-1635370426,-1808209289,-1581061465,-1129902901,-1869746345,1132597059,673881589,2065340905,-209754401,1733900746,78253491,905606205,-1874164635,1769027058,216609874,-1524051884,892499950,989559054,1765942695,-759922713,-1399353123,-528007670,-685118871,1434545247,-1094860370,432925339,-2083495738,-1379320374,824319216,-52989321,916523032,1936539965,1707468894,-18914938,-100018850,-18117991,1692427088,1141893948,1683121661,-1209719108,-1240089726,-2099347886,-2039019117,1893847583,1703340068,1858306255,-474537120,2011985413,-916095960,-1644498841,-1880334430,1654191678,-980125616,1914523654,944026388,372676737,-2056223801,-1683798317,616692743,-250075172,-529872265,510143894,866891206,-1730206102,-22867641,-903300967,-168129370,-1188073992,842340065,775336848,1317530450,-308647022,1422023923,2068009047,-995309717,1573577381,2020121748,-1218680250,-1249920022,82576692,585231680,375604566,873849851,1075091238,18837341,519107491,1178412728,-791225741,-328437388,-1796481887,895005298,-1331103201,471093802,-1409894077,544590704,-780582426,81912183,777545440,-1892650441,1631614188,-1934755448,2032954812,-1244847014,-899151905,-1571739861,290474978,-91819027,-828082687,-514530406,1030690687,1877939964,1104547075,-537973664,-1077657324,-322055122,1701625586,-537327750,-151094152,425517736,-136881101,962271770,-46282155,1049280508,561584857,-1052362184,1685650691,-556677796,1228605979,-1282457634,-834037196,198778422,-1827379025,-1276458680,-713189756,-1771152934,-1219462664,1108158619,-982990270,2132856425,-1740910502,1353442413,-363218268,689790149,1641234285,286683163,943992418,-963094668,-730702243,440312122,-1396353569,-1448107866,2102465985,1735562575,547602571,-954307003,153154505,-776194406,1118157320,540023589,-1923567099,832053873,591951103,610523073,-1748186667,-270518008,-1869920483,-1694211311,-1175804797,863288800,-1699825397,1143011869,-910051788,-831637366,-1498215630,-478286013,-1731385015,1470586318,-1317007457,-1612176469,-673947469,1267752440,1295190522,653301783,-1089759191,2081440593,-308360144,1395228289,185513923,1025297533,849551147,155174000,1046540078,1769203249,-465473325,-894424217,-1011698576,-1728106488,498274135,-1057750208,760525230,-772310098,-51348674,-729821742,599019750,-377050751,1944661316,512879882,1883759038,1572794956,537269770,1666783981,487552635,-1832169893,1401250415,1582917104,-1273136647,815176323,-754261301,-1560996826,-1782897013,2070917607,-1121294415,1286591560,131109578,-2106796327,1075706097,431966081,527321960,1147095148,2108211846,-1631321851,-1526864989,1101590415,1409180380,-85403876,1819589723,-672991480,1119137812,-319693142,1848044621,-922810416,-494670272,985267998,-873729823,397729941,-42793613,1438780472,550977828,-707760236,299603193,-1758315749,-2076783362,1123105435,-844484965,641837021,843353093,-780899822,-2102945263,253408055,-183864348,-2062761741,-1579847887,-1009410830,1920198525,-1642734695,-1236648806,-114445876,643033920,869358124,1952953501,-413886254,1493862157,-531831628,-507301187,1626946422,83142737,354994521,655189592,689014206,-2071924521,-597446154,-1432197495,2019640549,-339453606,328477852,1589886021,-1280161193,-737529957,816209177,-8216613,-105540594,-752657769,1956689169,-1756522191,-83743627,679670672,-439872026,250847799,-1783706175,1215475390,969557309,-1296181436,471513268,153742467,1327926764,324137833,-1620728768,-425201673,-857912830,-1460928912,1923154748,2111244825,-2106332215,592197078,-1523644037,644190295,42580543,367307440,-1605689839,1128901261,1819971170,2147405661,1640847652,1314966521,764610303,1147215176,-959705417,473298692,-865072817,-627657796,1854961919,97717987,2105026725,1681502951,1960531123,95395853,992508395,345174376,1305581159,1763702076,784100600,1178673909,50265698,1455420303,999805811,624021962,-1188123283,1078529077,71359347,1281139858,-201575184,-794056215],"sigBytes":1888},"key":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"words":[1619631603,-1772674238,-2125855309,-548028112,-320608156,-2015817140,-1044838201,2045460476,1149750138,-1944906187,-2034662277,-1201443049],"sigBytes":32},"iv":{"$super":{"$ref":"$[\\"key\\"][\\"$super\\"]"},"words":[1149750138,-1944906187,-2034662277,-1201443049],"sigBytes":16},"algorithm":{"keySize":8,"$super":{"cfg":{"mode":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"Encryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}},"Decryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}}},"padding":{},"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}},"blockSize":4,"$super":{"cfg":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"$super\\"]"},"keySize":4,"ivSize":4,"_ENC_XFORM_MODE":1,"_DEC_XFORM_MODE":2,"$super":{"_minBufferSize":0,"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}}}},"mode":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"},"padding":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"padding\\"]"},"blockSize":4,"formatter":{},"salt":{"words":[-1127699729,916403317],"sigBytes":8}}';
const dummyVault2 = '{"$super":{"$super":{}},"ciphertext":{"words":[1960104046,-2026458846,828693746,120835686,344905491,458405079,-1833146392,-2081215192,-806948408,1501126554,-58503883,-914208489,1996143636,1741133464,-1600780305,1977691728,-1213941110,-1660782951,339660183,-1217398494,-835590924,591034111,-1297367113,557683614,175159374,877558304,1612240353,-798843864,1027470291,1481337185,-2104320366,741556441,1543843229,-2072669977,1412912776,-630854960,-2100461339,93537580,806332633,1303608642,-203244443,479105483,1979267467,-1189794757,-339058629,-434698343,-1240949440,997947641,-1215936911,756248959,1701350372,469363426,-2081837488,-305885765,2060707106,-699454871,514145470,1106496561,-1210681309,107318381,-1853255371,762100064,286896854,-847208095,1353669444,-69117842,1890604061,108129849,720725446,-1154391651,-1842393825,-1196839939,-631039689,-1218709617,-2034374488,1266224774,-1379182035,-146029669,277072072,-1023479678,-240958717,270405099,-2123818434,-1734037580,-712476392,1620885722,-984441145,-1819654862,1885971361,688684942,500075798,683861288,186906459,-747259735,-812012426,1561945058,319410172,-605231259,-1621852548,105163209,1189309558,440539731,1049699638,-1525809595,-1090533478,1505534916,6834840,2109231064,-1808905446,-1834652393,919222994,754792355,-1480139554,501649719,793967900,962506718,88005074,-1017173098,1922212016,-1731062196,-417315713,284886275,-2093222001,222066434,-1377741105,-1537783013,2109307829,-1726938709,482123487,-1083760848,1602586325,-1246538301,2088124715,-463388786,-195096219,1741440714,-1650855087,1464566201,-1992077257,-90941976,1236375931,-1287105162,1083965754,-584427167,-977869648,-178689456,-1204666422,-119499517,1655734114,-64700904,-2130398768,1314021250,-321590894,1853211192,-30849029,1324967058,-1901442966,914641038,78565422,415965992,1152480778,2046741596,-821977575,933507028,-875774015,-654573295,714502787,-1123154394,-278403374,628562934,2003184456,1813375453,315675554,2093643987,1961709217,1823068821,-1253351035,383264553,-1831991699,-1471614079,-1349041734,1779113225,-2073051210,2078460000,924845210,716556915,35176105,1485026878,1240600415,870019093,1235896848,-1003160582,-21300851,-700354408,96336990,586545332,1999070101,1481793318,-989564445,717456610,-688098491,-1138469254,180000974,-1617838165,1084611718,-1114748640,1258241226,-371636434,-1163178843,799775101,-2002324704,433036519,-789143385,-1170556505,1636789055,1346474569,-549420009,-1109553700,-1314251358,2127818478,-506553859,25139247,1940466011,-1408435313,984579909,267537949,-521880118,-1773630430,-247959178,532819668,1600260155,-1679637579,1123396304,1028181877,838545292,-7835022,1813288574,-2090130806,653260261,540433207,830720587,-504420652,2131975132,-573509581,-1524051286,-70340415,-2103338722,-924015025,-852184032,295003405,-1856198099,249319586,-803833769,-847351623,1124200003,-308145508,375218440,-546909039,435268330,1392826537,-729060626,1618335325,466620968,2062013246,-1135850785,1605665407,-1879432109,1137799354,1047309156,-634466056,-955297610,1529174528,-926512428,-951134280,886050959,-979505342,2056560047,1119475560,-849849494,527192317,1395469635,-530465445,-1997272090,1768316587,923289972,432720578,-712234153,1975980723],"sigBytes":1152},"key":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"words":[-928809119,-904326799,2009225464,-606453359,1363025820,-854003883,1723324507,-1295286407,78233847,-597597229,-41496184,-1068046476],"sigBytes":32},"iv":{"$super":{"$ref":"$[\\"key\\"][\\"$super\\"]"},"words":[78233847,-597597229,-41496184,-1068046476],"sigBytes":16},"algorithm":{"keySize":8,"$super":{"cfg":{"mode":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"Encryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}},"Decryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}}},"padding":{},"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}},"blockSize":4,"$super":{"cfg":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"$super\\"]"},"keySize":4,"ivSize":4,"_ENC_XFORM_MODE":1,"_DEC_XFORM_MODE":2,"$super":{"_minBufferSize":0,"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}}}},"mode":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"},"padding":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"padding\\"]"},"blockSize":4,"formatter":{},"salt":{"words":[764935543,1010270294],"sigBytes":8}}';
const dummyVault3 = '{"$super":{"$super":{}},"ciphertext":{"words":[1043006842,645708961,-607008512,-888903902,-1621065231,1050758873,-1811044148,188864303,576708832,-1509271847,-1053458143,-1945064397,1414909360,-2020743655,-1267715783,1499262079,-644836719,1843802099,-276226024,153153979,-621071658,-1011609924,1976121029,-1775462032,178458379,13810574,876845730,-1642022043,1998124187,-458198963,-1403664705,233964199,-1535283531,1966108455,1114580024,3556293,-1750360279,1593432924,1795146412,-1776614333,972697952,-1095915840,-1951355770,-103214906,-1320132356,-1003787323,-1664386175,111872623,1669045150,150163898,991380383,-1321354942,-1432544422,1012037814,-1708998026,841400340,1778072787,-283276622,-523252562,-1041647998,1366757878,-1057033710,-1709843589,-888756333,-325416269,247081499,17161676,-275586048,207816881,-1738377580,1809711385,1638888885,1350787789,-896822543,-1561435837,156869983,-665074526,236857809,1025551623,901041340,-355098657,-1026025981,1760510884,-787183296,-1641212662,1093804113,1824641644,-2124859999,-1804224717,427329211,-829014140,-717239091,-1998033444,-1548459469,65510291,-1433002851,-3924852,-2024289204,-1609433650,-2033531180,-927484086,738618119,1441177763,621598669,-1678669729,838505339,-1713859547,500613551,-94492842,2058483966,-1917720572,-230480533,-204749897,1542600441,-290360432,-692621555,166575172,-1328471690,-920041977,-1643903030,1628972988,1270887124,1459287118,2089321533,754351035,-1144528713,-774888346,907416188,1167623431,1121414428,1473377613,-1114026061,1491319065,1628214128,-2067032297,802504298,-152164901,1078035367,-1838595847,-1361656501,1956750110,-499659548,-642461874,872739893,318611215,653579418,1484651957,-692973816,-1710996950,1832689752,1863462114,-1168798172,965688020,-1702524310,-1872599876,-858772052,1399385894,-856289860,133393084,1473829047,1602966123,-174677689,-1865391146,1403599373,-1033184890,-349730187,1788298334,-1652373720,1341018863,-1473110717,166650250,-1009250082,1654793450,863695206,1716584805,-2026561433,927163026,104862282,-1347360530,397409942,1361466828,1867034416,1171012063,772668739,-1762532284,-1536688947,226623367,-1926176645,-1440038724,-1211979679,301674288,28749451,872599329,961759772,1829222699,993128795,-1116991229,1308540244,-564745490,779224978,-453126252,-159501283,1479640371,-1999150736,-1715209916,-305394128,-1247756628,2146619072,-1658636860,-285666799,1005200557,-340519846,-468411657,-1490527769,714418789,-1328175537,694177459,-1964688803,936896629,-481466707,1480034930,-197103957,-607047839,-237844128,306324936,-713141032,-1397370620,271926155,714208749,1803021101,-73885266,406182067,-423094832,-829587347,-1015488448,1483468341,-1661417348,1939041193,-108654084,514675930,-937052616,-960449339,73887174,1518166900,-953037212,1093427373,1933740635,-1080662423,2068490634,-1813411695,2106356580,-1131716127,-1630838746,86418483,1057474178,1034643631,133309258,-1063583651,-2054258791,-1344107259,2132720276,-1769154180,-2015400616,2101289374,-659447940,-1014575695,1639155265,1774380889,-400294054,-747839034,-1915778679,-2143155452,-1159645242,-1465556032,-1152955066,244876824,1437965487,1873947504,-1884100403,1403833280,1419820153,542793366,-2117300329,-1945257369,2001877980,950921959,-398805940,-259067531,547967427,1931659385,-1795631876,-940150481,1491876113,1408549573,462703251,-1791872074,1382530951,-240191139,1281776766,-2060285203,-1671622982,1682104948,1839851223,-157989722,-2002087632,871546432,314593837,-1405381036,544784747,-1759482435,-1669563071,-1815533914,456263413,706667130,1434033813,1626796828,1556849757,-2010296839,-1222512957,-872119804,1072812128,1327785559,-438431983,-1547375647,-1068478266,682020912,1622829775,-888170226,-777591840,-523463169,747244548,-1863711134,2085749173,-526723602,-641456268,-170231316,578303154,-1884104579,1148502862,1431043030,-1291222302,1559419385,-1590940676,2030562471,554603382,-135137079,-520302112,2072209906,860618908,1983020217,-1481440086,-413334868,1021216515,-1091842853,-1942799745,-1341259364,-791175893,714390941,-1538007987,1390761009,480580694,720647085,-588604800,-1430163386,961441801,-1006766522,875105846,-580375294,1670434041,-262255302,-1492303789,1149448695,742741001,-1266099025,1542843876,1609105733,-466787967,-755543861,935715016,-338323946,1951779149,-279496499,-649381040,-408958348,-102075913,1024193113,-1418266745,-2114396227,1018071059,-1752957818,759237785,1103997971,-1276696359,-763455624,1449799231,-337468700,906923317,1080716051,-394860893,-1544907107,245474110,1917512929,2057510850,929821268,869115427,-1195586202,-1131217616,-1561589083,-1936056723,1388208226,228521056,964801713,-824512130,-1379878970,-1896411982,-1585982105,-2102624699,-2146835989,2054481661,1731819363,1453513745,-1606392885,1184700014,29865736,890803052,436419492,1216905056,-1366350266,1053689838,-495440493,1934792911,39204376,-863131707,-281937073,-679877347,1091448677,-1713649946,-2089493361,1259928294,-876075384,715689010,-587427345,759748782,1382802800,6811298,-1340518289,56292524,524161400,373569113,-398830242,-1589728521,648287933,1772848932,-1231987869,918085400,1483932287,498369111,1709708249,-1762909148,1418862715,-182369647,-1958498095,1872989405,-2097579727,1748045636,167599221,-1086133085,98210057,-939474953,274581103,-1323025539,2132875082,2137550483,-1111970321,-2120758126,1979443416,252165939,-207691201,300688756,-1248154430,-743754689,354823944,-1342280793,178172146,-1628156741,-1864068124,-623708141,-1237461728,-1886261174,-2088156940,-1159563472,2107589223,-536197687,-1628557733,-331715736,2085313529,1653781218,-1855244807,2065109625,887546807,560302607,-659327830,1033966117,1967710267,1555259579,803272671,1097100564,-531487657,-1516848453,-61075259,325920698,1058413168,1090880117,953767404,1164326878,-2112188599,-1696206601,-1614443072,-2082973257,-1095215433],"sigBytes":2080},"key":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"words":[47227460,-782972124,-688443097,-1697336949,1607427999,-2104262131,318239512,-25866395,1202806856,-356246669,756462370,-1367073730],"sigBytes":32},"iv":{"$super":{"$ref":"$[\\"key\\"][\\"$super\\"]"},"words":[1202806856,-356246669,756462370,-1367073730],"sigBytes":16},"algorithm":{"keySize":8,"$super":{"cfg":{"mode":{"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}},"Encryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}},"Decryptor":{"$super":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"}}},"padding":{},"$super":{"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}},"blockSize":4,"$super":{"cfg":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"$super\\"]"},"keySize":4,"ivSize":4,"_ENC_XFORM_MODE":1,"_DEC_XFORM_MODE":2,"$super":{"_minBufferSize":0,"$super":{"$ref":"$[\\"$super\\"][\\"$super\\"]"}}}}},"mode":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"mode\\"]"},"padding":{"$ref":"$[\\"algorithm\\"][\\"$super\\"][\\"cfg\\"][\\"padding\\"]"},"blockSize":4,"formatter":{},"salt":{"words":[-781006935,-1680730426],"sigBytes":8}}';
//const dummyEncVault = '{"$super":{"$super":{}},"ciphertext":{"words":[2043896956,1991586527,-253394041,1766460478,1919914102,-672999597,335692925,1748976784,-643207220,-728198085,-118888177,-438917403,1036717864,2051306617,-1885352743,-990507555,-69445620,17719704,1798153867,1182361348,-561444454,-2040266956,230874053,-1181893759,553727461,1569817306,-913343761,916908839,560554827,132074583,-863202883,-1012039028,22374354,-1841462487,589258443,-1953197686,-1432176576,912664807,1302071830,-836796161,-1716684015,1449887451,1165643771,-1938859254,-1485470314,1968466285,328357620,669320680,2076240689,-715474623,1530034078,-44325810,2041049586,-1450300469,997664117,-1974196531,680294385,-1968864050,873765709,524846934,-1672179474,1527642749,-1244705569,-602613426,-1815347445,512191491,-2123503901,-293467402,-1132622453,-2108645260,-1283045103,-961857742,-174371230,-1821092722,5315161,1299148407,-1274210623,1360587143,2023529793,-1733717267,650757007,1847421492,-1173775804,-917009810,-1703581266,2119669939,-524284466,575390322,-1421736953,1926496454,770393925,-393706937,-1071014176,1559759786,1365344899,-152612263,366313381,-307962418,-776951570,838594086,-284910809,1555368591,-1858260522,1325701850,-1151591579,-335543213,659712306,-762979581,-290333467,-977951064,-2074917984,-457263180,1878918652,1219257608,-571154328,546284652,1149818813,1962780719,1611885668,1477409569,-998129722,-826521027,967690132,1092098868,1321062302,-1112898899,755701994,1532753994,-415145710,-1221619474,-1754115408,763606567,-690799294,1346406594,1858463620,-1192810970,-163102144,-1448764701,-391227477,1343093928,2056361885,238106625,-1061654383,-1051813141,1153621624,-774081719,-1610976223,-2086266129,-2034785804,-1056600025,-1480749525,-1623787336,147449770,-1916139841,1010451967,1408593888,-747135944,-897398868,808160370,-1473907598,1517537743,-117921136,1488745421,1245114248],"sigBytes":656},"key":{"$super":{"$super":{"$ref":"$["$super"]["$super"]"}},"words":[337386130,797343206,-491203281,2060111642,131934245,421911516,1197376056,-2101642553,1151690573,-1765858766,-2135252194,193528518],"sigBytes":32},"iv":{"$super":{"$ref":"$["key"]["$super"]"},"words":[1151690573,-1765858766,-2135252194,193528518],"sigBytes":16},"algorithm":{"keySize":8,"$super":{"cfg":{"mode":{"$super":{"$super":{"$ref":"$["$super"]["$super"]"}},"Encryptor":{"$super":{"$ref":"$["algorithm"]["$super"]["cfg"]["mode"]"}},"Decryptor":{"$super":{"$ref":"$["algorithm"]["$super"]["cfg"]["mode"]"}}},"padding":{},"$super":{"$super":{"$ref":"$["$super"]["$super"]"}}},"blockSize":4,"$super":{"cfg":{"$ref":"$["algorithm"]["$super"]["cfg"]["$super"]"},"keySize":4,"ivSize":4,"_ENC_XFORM_MODE":1,"_DEC_XFORM_MODE":2,"$super":{"_minBufferSize":0,"$super":{"$ref":"$["$super"]["$super"]"}}}}},"mode":{"$ref":"$["algorithm"]["$super"]["cfg"]["mode"]"},"padding":{"$ref":"$["algorithm"]["$super"]["cfg"]["padding"]"},"blockSize":4,"formatter":{},"salt":{"words":[1116333811,1175956848],"sigBytes":8}}';
const localVault = { vault: dummyVault };
const localVault1 = { vault: dummyVault1 };
const localVault2 = { vault: dummyVault2 };
const localVault3 = { vault: dummyVault3 };
const password = 'kush1234';
const token = keccak512(password);
const txns = '{"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a":[],"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65":[]}';
const transactionsLocalStorageObj = { transactions: txns };
const createVaultTxns = '{"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a":[]}';
const transactionLocalStorageObjForCreateVault = {
  transactions: createVaultTxns,
};
const txnsExpected = '{"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a":[],"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65":[],"0xa0e29a8871d969fba7a96bd5aea6df1e25385d80a722a4e766ae070c2344c7d1":[],"0xa0130e8bef33916c224f8b45b32bff5ffc5ccff1b875cf7606fdcb620aa9e0f0":[]}';
const txnsExpectedForCreateWalletSeedWords = '{"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a":[],"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65":[],"0xa0d673a1e79ba0731b54b3b0227c99a4a5857b0a36cb3f2a5e6ac16d3fd356bc":[]}';
const txnsExpectedForCreateWalletPrivateKey = '{"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a":[],"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65":[],"0xa0130e8bef33916c224f8b45b32bff5ffc5ccff1b875cf7606fdcb620aa9e0f0":[]}';
const txns1 = '{"0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da":[],"0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20":[],"0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0":[],"0xa0bae282de261d56b47198128197be6882d3bc6bf3289b0172e0b77dd77e0a26":[],"0xa09e3e8079a65d87060c5be7272922aaa21b9b545536dce43ded63c190898c96":[],"0xa09b947a76d21af738ccf5463425336026befe20d1b9ce1f423b15847bb49f1e":[]}';
const transactionsLocalStorageObj1 = { transactions: txns1 };
const txn1Expected = '{"0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da":[],"0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20":[],"0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0":[],"0xa0bae282de261d56b47198128197be6882d3bc6bf3289b0172e0b77dd77e0a26":[],"0xa09e3e8079a65d87060c5be7272922aaa21b9b545536dce43ded63c190898c96":[],"0xa09b947a76d21af738ccf5463425336026befe20d1b9ce1f423b15847bb49f1e":[],"0xa0e8e840366eadd2a5b69df9c900518e8ee84bc17b29e079e3a37bc79ea6337f":[],"0xa0614df165b027e89a8f6e9b9312f44345b821e1abdde8c71d1c4eeea40c64ae":[],"0xa06320f990ca05fa24efeb0129cc3314751228ba10bf82fe99b9654972067f6b":[]}';
const txns2 = '{"0xa0e8e840366eadd2a5b69df9c900518e8ee84bc17b29e079e3a37bc79ea6337f":[],"0xa0614df165b027e89a8f6e9b9312f44345b821e1abdde8c71d1c4eeea40c64ae":[],"0xa06320f990ca05fa24efeb0129cc3314751228ba10bf82fe99b9654972067f6b":[]}';
const transactionsLocalStorageObj2 = { transactions: txns2 };
const txn2Expected = '{"0xa0e8e840366eadd2a5b69df9c900518e8ee84bc17b29e079e3a37bc79ea6337f":[],"0xa0614df165b027e89a8f6e9b9312f44345b821e1abdde8c71d1c4eeea40c64ae":[],"0xa06320f990ca05fa24efeb0129cc3314751228ba10bf82fe99b9654972067f6b":[],"0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da":[],"0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20":[],"0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0":[],"0xa0bae282de261d56b47198128197be6882d3bc6bf3289b0172e0b77dd77e0a26":[],"0xa09e3e8079a65d87060c5be7272922aaa21b9b545536dce43ded63c190898c96":[],"0xa09b947a76d21af738ccf5463425336026befe20d1b9ce1f423b15847bb49f1e":[]}';
const txnsLocal3 = '{"0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da":[],"0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20":[],"0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0":[],"0xa0e8e840366eadd2a5b69df9c900518e8ee84bc17b29e079e3a37bc79ea6337f":[],"0xa0614df165b027e89a8f6e9b9312f44345b821e1abdde8c71d1c4eeea40c64ae":[],"0xa06320f990ca05fa24efeb0129cc3314751228ba10bf82fe99b9654972067f6b":[]}';
const transactionsLocalStorageObj3 = { transactions: txnsLocal3 };
const txnUTC1541627062696Vault = '{"0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da":[],"0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20":[],"0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0":[]}';
const txnExpectedMergingVault = '{"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a":[],"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65":[],"0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da":[],"0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20":[],"0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0":[],"0xa0e8e840366eadd2a5b69df9c900518e8ee84bc17b29e079e3a37bc79ea6337f":[],"0xa0614df165b027e89a8f6e9b9312f44345b821e1abdde8c71d1c4eeea40c64ae":[],"0xa06320f990ca05fa24efeb0129cc3314751228ba10bf82fe99b9654972067f6b":[]}';
const encState = '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';
const decryptedState = '{"appState":{"pageStatus":"home","token":"a4c4d5ba6b258360c11943470ac3ea02fa9f365f5c963882f156551bb9ec167ca0f2f62352038bc0abe812d3983cce3b8d953db75332519194c48d98cf986fc1","isTermsAgree":true,"isUpdatedTouVersion":false,"timeout":300000,"marketData":{"aion":{"marketData":{"currentPrice":"0.43","marketCap":"104,474,861.41","priceChangePercentage24h":"2.16","totalVolume":"2,385,967.01","circulatingSupply":"244,379,363.59"}}},"sendTokenSavedState":{},"isNetworkConnected":true,"statusCode":200,"isLoading":false},"animationReducer":{"showSettings":false,"headerLastToggle":"settings"},"accounts":{"accounts":[]},"wallets":{"wallets":[{"privateKey":"0x1a3323ac1d6a41c64b30eff05809c9338e2d2349040c95c6fcf667b47fa596a0ecfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d","address":"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a","alias":"Wallet 1"},{"privateKey":"0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e","address":"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65","alias":"Wallet 2"}],"currentWallet":{"privateKey":"0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e","address":"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65","alias":"Wallet 2"},"hasWallet":true,"seedWords":"board hour antique dignity night clinic toward neck ask lucky lonely eye","walletBalanceArr":[{"wallet":{"privateKey":"0x1a3323ac1d6a41c64b30eff05809c9338e2d2349040c95c6fcf667b47fa596a0ecfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d","address":"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a","alias":"Wallet 1"},"selectedToken":{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":"0","usd":0}},"aionToken":{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":0,"usd":0}}},{"wallet":{"privateKey":"0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e","address":"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65","alias":"Wallet 2"},"selectedToken":{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":"0","usd":0}},"aionToken":{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":0,"usd":0}}}],"currentWalletBalance":{"wallet":{"privateKey":"0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e","address":"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65","alias":"Wallet 2"},"selectedToken":{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":0,"usd":0}}}},"networks":{"networks":[{"text":"Main Network","value":"mainnet","networkURL":"https://mainnet-node.theoan.com/rpc","networkPort":"","networkFullUrl":"https://mainnet-node.theoan.com/rpc"},{"text":"Mastery Test Network","value":"mastery","networkURL":"https://amity-node.theoan.com/rpc","networkPort":"","networkFullUrl":"https://amity-node.theoan.com/rpc"},{"text":"Localhost","value":"localhost","networkURL":"http://127.0.0.1","networkPort":"8545","networkFullUrl":"http://127.0.0.1:8545"},{"text":"Custom","value":"custom","networkURL":"http://localhost","networkPort":"8545","networkFullUrl":"http://localhost:8545"}],"currentNetwork":{"text":"Mastery Test Network","value":"mastery","networkURL":"https://amity-node.theoan.com/rpc","networkPort":"","networkFullUrl":"https://amity-node.theoan.com/rpc"},"showNetworkList":false},"transactions":{"pendingTrxns":[]},"vaults":{"toastOptions":null},"toast":{"toastOptions":null},"tokens":{"tokenList":{"0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a":{"mastery":[{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":0,"usd":0}}],"custom":[],"localhost":[],"mainnet":[]},"0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65":{"mastery":[{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":0,"usd":0}}],"custom":[],"localhost":[],"mainnet":[]}},"selectedToken":{"id":"aion","name":"Aion","symbol":"AION","decimals":18,"address":"none","balance":{"amount":0,"usd":0}}},"message":{}}';
const seedWords = 'board hour antique dignity night clinic toward neck ask lucky lonely eye';
// dummy  wallets
const wallet1 = {
  privateKey:
    '0x1a3323ac1d6a41c64b30eff05809c9338e2d2349040c95c6fcf667b47fa596a0cfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d',
  address: '0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a',
  publicKey: '0xecfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d',
  alias: 'Wallet 1',
};
const wallet2 = {
  privateKey:
    '0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e',
  address: '0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65',
  publicKey: '0xdf711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e',
  alias: 'Renamed Account',
};
const walletsMerginVault = {
  wallets: [
    {
      privateKey:
        '0x1a3323ac1d6a41c64b30eff05809c9338e2d2349040c95c6fcf667b47fa596a0ecfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d',
      address: '0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a',
      alias: 'Wallet 1',
    },
    {
      privateKey:
        '0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e',
      address: '0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65',
      alias: 'Wallet 2',
    },
    {
      privateKey:
        '0xbba40836add35cada7baf5d5487133130d9b523fed1a9c789ff77ff016c38e6472a2b2bb25b8ca8c5bc396b4555791e0d8774f4dad4d85413d585680c8bcc0f0',
      address: '0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da',
      alias: 'Wallet 1-2',
      imported: true,
    },
    {
      privateKey:
        '0x887dca627d6a6ebe1e5f4175f82501909485abdc42e7f4ec1f5dd499ffee1cfc5a557f1b4afdbd12ff79e4978f0b50c6b6f40d226dafb8ac5047baaae7c47c38',
      address: '0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20',
      alias: 'Wallet 2-2',
      imported: true,
    },
    {
      privateKey:
        '0xffef0be88f4ecc60bb9c78b0df8a910927ae8cd1f2012ad165ec74d54ee791961eacc8c0934c96103de8f3c2a064d8651554063507257cd35e512827495a64ed',
      address: '0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0',
      alias: 'Wallet 3',
      imported: true,
    },
    {
      privateKey:
        '0x2efaff8c2af717ccf3bcd977ee5b4b838e540a0c0eb483388bf388eaf7584978de62be402fccf9efedf736dbc5b0f9701811513385592f27da048bd47a3f2667',
      address: '0xa0e8e840366eadd2a5b69df9c900518e8ee84bc17b29e079e3a37bc79ea6337f',
      alias: 'Wallet 1-3',
      imported: true,
    },
    {
      privateKey:
        '0x9e4b82dbd9d56b189b771695f167085bc9bd81f16c13ab58239745f9180982bf87ab77cbb93bad04e380e6dd5c28ac583f018c1c45cb8b44d0bab35bbf661948',
      address: '0xa0614df165b027e89a8f6e9b9312f44345b821e1abdde8c71d1c4eeea40c64ae',
      alias: 'Wallet 2-3',
      imported: true,
    },
    {
      privateKey:
        '0x78048e83e8b76431fc965252207924ba4b3c6c314c1ca780d161b41e1d88c65be994f981fb81e2a58c2510a594ce83de60e66a19d6f52f860767d771804c4243',
      address: '0xa06320f990ca05fa24efeb0129cc3314751228ba10bf82fe99b9654972067f6b',
      alias: 'Wallet 3-2',
      imported: true,
    },
  ],
  currentWallet: {
    privateKey:
      '0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e',
    address: '0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65',
    alias: 'Wallet 2',
  },
  seedWords: 'board hour antique dignity night clinic toward neck ask lucky lonely eye',
  derivationPath: '',
  hdwalletIndex: 2,
};
const walletsMerginVault3 = {
  wallets: [
    {
      privateKey:
        '0xbba40836add35cada7baf5d5487133130d9b523fed1a9c789ff77ff016c38e6472a2b2bb25b8ca8c5bc396b4555791e0d8774f4dad4d85413d585680c8bcc0f0',
      address: '0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da',
      alias: 'Wallet 1',
    },
    {
      privateKey:
        '0x887dca627d6a6ebe1e5f4175f82501909485abdc42e7f4ec1f5dd499ffee1cfc5a557f1b4afdbd12ff79e4978f0b50c6b6f40d226dafb8ac5047baaae7c47c38',
      address: '0xa09309b9a625bcb780e735ac9fce3b87bd3c172760bed4a3bf4a8b6fb5b00b20',
      alias: 'Wallet 2',
    },
    {
      privateKey:
        '0xffef0be88f4ecc60bb9c78b0df8a910927ae8cd1f2012ad165ec74d54ee791961eacc8c0934c96103de8f3c2a064d8651554063507257cd35e512827495a64ed',
      address: '0xa0069eb11405e21e5ca40b737559aff78bad1f22611aad23f8cfbfb2c63bd3d0',
      alias: 'Wallet 3',
    },
    {
      privateKey:
        '0x2efaff8c2af717ccf3bcd977ee5b4b838e540a0c0eb483388bf388eaf7584978de62be402fccf9efedf736dbc5b0f9701811513385592f27da048bd47a3f2667',
      address: '0xa0e8e840366eadd2a5b69df9c900518e8ee84bc17b29e079e3a37bc79ea6337f',
      alias: 'Wallet 1-2',
      imported: true,
    },
    {
      privateKey:
        '0x9e4b82dbd9d56b189b771695f167085bc9bd81f16c13ab58239745f9180982bf87ab77cbb93bad04e380e6dd5c28ac583f018c1c45cb8b44d0bab35bbf661948',
      address: '0xa0614df165b027e89a8f6e9b9312f44345b821e1abdde8c71d1c4eeea40c64ae',
      alias: 'Wallet 2-2',
      imported: true,
    },
    {
      privateKey:
        '0x78048e83e8b76431fc965252207924ba4b3c6c314c1ca780d161b41e1d88c65be994f981fb81e2a58c2510a594ce83de60e66a19d6f52f860767d771804c4243',
      address: '0xa06320f990ca05fa24efeb0129cc3314751228ba10bf82fe99b9654972067f6b',
      alias: 'Wallet 3-2',
      imported: true,
    },
    {
      privateKey:
        '0xe7ac18ba1d50d8c0dd57839a87bbea38c81966c4dc463c992636ba928ae8889b378582d926283e877162e5bacaf93649092d6e3b7015683ff5be8f71c2f81330',
      address: '0xa02613c9a9db5a0c04c8dcb63d250620c8317cb123f2bd8d776bed557049d9c0',
      publicKey: '0x378582d926283e877162e5bacaf93649092d6e3b7015683ff5be8f71c2f81330',
      alias: 'Wallet 1-3',
      imported: true,
    },
    {
      privateKey:
        '0x1d965c47127ac76ea5a882d55f5396fce062c49997d4185bf8c34c84c5a8dfefe48ae10f3c27e18bf63f9cce36e4d6b99473a7c97509d92e0abd71ed04b44ecc',
      address: '0xa0c8305d6cf494e9da4c8fbcb26457c2ecaacec75497e84738ef9bf613109f0f',
      alias: 'Wallet 2-3',
      imported: true,
    },
    {
      privateKey:
        '0x7bd4f89e3dabed5564b2ae06fa29daf8003158c4b544bc466adc060e06408d71c41050dc758d4b0bd35baac117034302d2852439f8c6548e11734e1a7b7bf914',
      address: '0xa04067c65891a67ee4972a0dd9b26ca2dfbf59aab83f2ee3da684a835b11e23c',
      alias: 'Wallet 3-3',
      imported: true,
    },
    {
      privateKey:
        '0x10df1df9fb7ee359e0b5f30aeb48cb48e611ff9c8534f6e3731de13c94e8de9d12468fcadea45d012f3e07410e9acb5e58f845153838d85276cffc9943dde3f8',
      address: '0xa0066ce69106d734f0c676a902389480533a2f4366773b6aab028fa77278745d',
      publicKey: '0x12468fcadea45d012f3e07410e9acb5e58f845153838d85276cffc9943dde3f8',
      alias: 'Wallet 1-4',
      imported: true,
    },
    {
      privateKey:
        '0x9aa3fa327c246ff4d93b7f5072e3e692285618fcb8b028550e5ae1ad24d60ddf68295f1ccfd781e63f17e704d56aa5874057fe3efaef79d990a77796a70f0ae8',
      address: '0xa03bec4975f2fd9eeba122d1eab7a15c6777ff1cfbe9788b403fff4a32665add',
      alias: 'Wallet 2-4',
      imported: true,
    },
  ],
  seedWords: 'gold slush success vessel quick betray trophy turkey embody dice demise embody',
  derivationPath: '',
  hdwalletIndex: 3,
  hashKey:
    'a4c4d5ba6b258360c11943470ac3ea02fa9f365f5c963882f156551bb9ec167ca0f2f62352038bc0abe812d3983cce3b8d953db75332519194c48d98cf986fc1',
  currentWallet: {
    privateKey:
      '0xbba40836add35cada7baf5d5487133130d9b523fed1a9c789ff77ff016c38e6472a2b2bb25b8ca8c5bc396b4555791e0d8774f4dad4d85413d585680c8bcc0f0',
    address: '0xa00dfdc7c966accaa26e4aaa5c8b72b1a18ddd260bc914f98dca58a9d2a258da',
    alias: 'Wallet 1',
  },
};
const createVaultFirstAccountAlias = 'Wallet 1';
const wallets = [];
wallets.push(wallet1);
wallets.push(wallet2);

// runs before each test in this block

describe('VaultService', () => describe('#checkVault()', () => {
  it('checkVault should work', async () => {
    // getLocalStorage should return what we want.
    const mockRetrunValue = { vault: 'this is vault' };
    const stub = sinon.stub(browserService, 'getLocalStorage').returns(mockRetrunValue);
    const vaultOutput = await VaultService.checkVault();
    assert.equal(vaultOutput, mockRetrunValue.vault);
    stub.restore();
  });
}));

describe('#createVault', () => {
  it('create vault key do not exists', async () => {
    const generateRandomSeedStub = sinon.stub(hdwallet, 'generateRandomSeed').returns(seedWords);
    const sendMessageStub = sinon.stub(browserService, 'sendMessage');
    // sendMessageStub
    //   .withArgs({ result: 'getKey' })
    //   .returns({ type: 'getKey', data: undefined });
    const setLocalStorageStub = sinon.stub(browserService, 'setLocalStorage');
    setLocalStorageStub.withArgs('vault').returns({});
    setLocalStorageStub.withArgs('transactions').returns({});
    const vaultOutput = await VaultService.createVault(token);
    const cipher = jc.retrocycle(JSON.parse(setLocalStorageStub.getCall(0).args[1]));
    const bytes = CryptoJS.AES.decrypt(cipher, token);
    const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    const decryptedVaultOutput = JSON.parse(plaintext);
    assert(
      _.isEqual(sendMessageStub.getCall(0).args[0], updatekeyExpected),
      'The updated key should be as per expected',
    );
    assert.equal(
      vaultOutput.wallets[0].privateKey,
      '0x1a3323ac1d6a41c64b30eff05809c9338e2d2349040c95c6fcf667b47fa596a0ecfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d',
      'The private key of first account should be as expected',
    );

    assert.equal(
      vaultOutput.wallets[0].alias,
      createVaultFirstAccountAlias,
      'The alias of first account should be as expected',
    );

    assert.equal(
      vaultOutput.currentWallet.privateKey,
      vaultOutput.wallets[0].privateKey,
      'The selected account should be as expected',
    );
    assert(
      _.isEqual(vaultOutput, decryptedVaultOutput),
      'The local vault storage should be as expected',
    );
    assert.equal(
      setLocalStorageStub.getCall(1).args[1],
      transactionLocalStorageObjForCreateVault.transactions,
      'The local transaction storage should be as expected',
    );
    generateRandomSeedStub.restore();
    sendMessageStub.restore();
    setLocalStorageStub.restore();
  });
});

describe('#createVaultWithSeedWords', () => {
  it('create vault key do not exists', async () => {
    const generateRandomSeedStub = sinon.stub(hdwallet, 'generateRandomSeed').returns(seedWords);
    const sendMessageStub = sinon.stub(browserService, 'sendMessage');
    // sendMessageStub
    //   .withArgs({ result: 'getKey' })
    //   .returns({ type: 'getKey', data: undefined });
    const setLocalStorageStub = sinon.stub(browserService, 'setLocalStorage');
    setLocalStorageStub.withArgs('vault').returns({});
    setLocalStorageStub.withArgs('transactions').returns({});
    const vaultOutput = await VaultService.createVault(token, seedWords);
    const cipher = jc.retrocycle(JSON.parse(setLocalStorageStub.getCall(0).args[1]));
    const bytes = CryptoJS.AES.decrypt(cipher, token);
    const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    const decryptedVaultOutput = JSON.parse(plaintext);
    assert(
      _.isEqual(sendMessageStub.getCall(0).args[0], updatekeyExpected),
      'The updated key should be as per expected',
    );
    assert.equal(
      vaultOutput.wallets[0].privateKey,
      '0x1a3323ac1d6a41c64b30eff05809c9338e2d2349040c95c6fcf667b47fa596a0ecfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d',
      'The private key of first account should be as expected',
    );

    assert.equal(
      vaultOutput.wallets[0].alias,
      createVaultFirstAccountAlias,
      'The alias of first account should be as expected',
    );

    assert.equal(
      vaultOutput.currentWallet.privateKey,
      vaultOutput.wallets[0].privateKey,
      'The selected account should be as expected',
    );
    assert(
      _.isEqual(vaultOutput, decryptedVaultOutput),
      'The local vault storage should be as expected',
    );
    assert.equal(
      setLocalStorageStub.getCall(1).args[1],
      transactionLocalStorageObjForCreateVault.transactions,
      'The local transaction storage should be as expected',
    );
    generateRandomSeedStub.restore();
    sendMessageStub.restore();
    setLocalStorageStub.restore();
  });
});

describe('#verify()', () => {
  it('return vault object as expected', async () => {
    const getLocalStorageStub = sinon.stub(browserService, 'getLocalStorage');
    getLocalStorageStub.withArgs('vault').returns(localVault);
    const vaultOutput = await VaultService.verify(token);
    assert.equal(vaultOutput.seedWords, seedWords, 'Seed words should be as expected');
    assert.equal(
      vaultOutput.wallets.length,
      vaultOutput.hdwalletIndex,
      'length of wallet should be as expected',
    );
    assert.equal(
      vaultOutput.wallets[0].privateKey,
      '0x1a3323ac1d6a41c64b30eff05809c9338e2d2349040c95c6fcf667b47fa596a0ecfd3f04a73e8c1d8411abd73760204aee2d276e67aa8fed9b485a7077189a5d',
      'The private key of first account should be as expected',
    );
    assert.equal(
      vaultOutput.wallets[1].privateKey,
      '0xd53aa9f45bcf07c0e91b47841e1f44d6996b34e17c3640983ef1d1e2f82ea685df711c8b8d80e7a81da8d2b708879d1b6a2256dad8bc609002de5b29a23d059e',
      'The private key of second account should be as expected',
    );
    getLocalStorageStub.restore();
  });
});

describe('#changeCurrentWalletToVault', () => {
  it('should change selected account to vault', async () => {
    const getLocalStorageStub = sinon.stub(browserService, 'getLocalStorage');
    getLocalStorageStub.withArgs('vault').returns(localVault);
    const setLocalStorageStub = sinon.stub(browserService, 'setLocalStorage');
    await VaultService.changeCurrentWalletToVault(token, wallet1);
    const cipher = jc.retrocycle(JSON.parse(setLocalStorageStub.getCall(0).args[1]));
    const bytes = CryptoJS.AES.decrypt(cipher, token);
    const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    const decryptedVaultOutput = JSON.parse(plaintext);
    assert(
      _.isEqual(decryptedVaultOutput.currentWallet, wallet1),
      'The selected account should be as expected',
    );
    getLocalStorageStub.restore();
    setLocalStorageStub.restore();
  });
});

describe('#exportVault()', () => {
  it('export vault', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage').returns(localVault);
    /* eslint-disable */
    const vaultOutput = await VaultService.exportVault(token);
    const cipher = jc.retrocycle(JSON.parse(vaultOutput));
    const bytes = CryptoJS.AES.decrypt(cipher.content, token);
    const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    const decryptedVaultOutput = JSON.parse(plaintext);
    assert.equal(
      decryptedVaultOutput.wallets.length,
      decryptedVaultOutput.hdwalletIndex,
      'Number of accounts should be same as hd wallet index',
    );
    assert.equal(
      decryptedVaultOutput.wallets[0].address,
      '0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a',
      'Address of account should be as expected',
    );
    assert.equal(
      decryptedVaultOutput.wallets[1].address,
      '0xa07c78cc64f2978eccc3c4aa624f5ba3aa999f8e72d9548a11e6573ace098d65',
      'Address of account should be as expected',
    );
    /* eslint-enable */
    stub.restore();
  });
});

describe('#importVaultService()', () => {
  it('importing fresh new vault', async () => {
    const getLocalStorageStub = sinon.stub(browserService, 'getLocalStorage');
    getLocalStorageStub.withArgs('vault').returns({});
    getLocalStorageStub.withArgs('transactions').returns({});
    const setLocalStorageStub = sinon.stub(browserService, 'setLocalStorage');
    const sendMessageStub = sinon.stub(browserService, 'sendMessage');
    sendMessageStub.withArgs({ result: 'getKey' }).returns({ type: 'getKey', data: undefined });
    const inputFile = readFileSync('test/app/vaultFile/UTC-1541627062696_vault', {
      encoding: 'utf8',
    });

    const vaultOutput = await VaultService.importVaultService(inputFile, password, undefined);
    assert(
      _.isEqual(sendMessageStub.getCall(1).args[0], updatekeyExpected),
      'The password should be stored as expected',
    );
    const cipher = jc.retrocycle(JSON.parse(setLocalStorageStub.getCall(0).args[1]));
    const bytes = CryptoJS.AES.decrypt(cipher, token);
    const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    const decryptedVaultOutput = JSON.parse(plaintext);
    assert.equal(
      vaultOutput.seedWords,
      'gold slush success vessel quick betray trophy turkey embody dice demise embody',
      'seed words should be as expected',
    );
    assert.equal(
      vaultOutput.wallets.length,
      vaultOutput.hdwalletIndex,
      'Number of wallets should be same as hdwallet Index',
    );
    assert(
      _.isEqual(vaultOutput, decryptedVaultOutput),
      'The local vault storage should be as expected',
    );
    assert.equal(
      setLocalStorageStub.getCall(1).args[1],
      txnUTC1541627062696Vault,
      'Transaction storage should be as per expected',
    );
    /* eslint-disable-next-line */
    sendMessageStub.restore();
    getLocalStorageStub.restore();
    setLocalStorageStub.restore();
  });
  it('merging vault', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('vault').returns(localVault);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage');

    const inputFile = readFileSync('test/app/vaultFile/UTC-1540502966514_vault', {
      encoding: 'utf8',
    });

    const vaultOutput = await VaultService.importVaultService(inputFile, 'Kunte$h11293', token);
    /* eslint-disable-next-line */
    assert.equal(4, vaultOutput.wallets.length, 'length of the wallets must be as expected');

    assert(
      vaultOutput.wallets[3].address
        === '0xa0130e8bef33916c224f8b45b32bff5ffc5ccff1b875cf7606fdcb620aa9e0f0',
      'Address of the output must be same as expected of New Wallet 3',
    );

    assert(
      vaultOutput.wallets[0].address
        === '0xa0080f1022b8a94da1ec0172b521b2ff5c082c7978672e2e96a4bdb9fde8562a',
      'Address of the output must be same as expected of New Wallet 3',
    );

    assert.equal(
      'board hour antique dignity night clinic toward neck ask lucky lonely eye',
      vaultOutput.seedWords,
      'Seed words must be retrieved correctly',
    );

    assert(
      vaultOutput.wallets[2].alias === 'Wallet 1-2',
      "Alias of the merge vault's wallet 1 should be Wallet 1-2",
    );

    assert(
      vaultOutput.wallets[3].alias === 'Wallet 2-2',
      "Alias of the merge vault's wallet 1 should be Wallet 2-2",
    );
    assert.equal(
      stubSetLocalStorage.getCall(1).args[1],
      txnsExpected,
      'The transaction object should be modified as expected',
    );

    stub.restore();
    stubSetLocalStorage.restore();
  });
  it('merging same vault', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('vault').returns(localVault1);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj1);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage');

    const inputFile = readFileSync('test/app/vaultFile/UTC-1541627062696_vault', {
      encoding: 'utf8',
    });

    const vaultOutput = await VaultService.importVaultService(inputFile, password, token);
    assert(
      vaultOutput.message === 'This vault already exists. Cannot overwrite',
      'It should give the expected message',
    );
    assert(vaultOutput.type === 'warning', 'It should give the expected message type');
    assert.equal(stubSetLocalStorage.callCount, 0, 'The transaction object should not be modified');
    stub.restore();
    stubSetLocalStorage.restore();
  });
  it('merging same vault with different Alias', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('vault').returns(localVault1);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj1);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage');

    const inputFile = readFileSync('test/app/vaultFile/UTC-1541627644172_vault', {
      encoding: 'utf8',
    });

    const vaultOutput = await VaultService.importVaultService(inputFile, password, token);
    assert(
      vaultOutput.message === 'This vault already exists. Cannot overwrite',
      'It should give the expected message',
    );
    assert(vaultOutput.type === 'warning', 'It should give the expected message type');
    assert.equal(stubSetLocalStorage.callCount, 0, 'The transaction object should not be modified');
    stub.restore();
    stubSetLocalStorage.restore();
  });
  it('merging distinct vaults currentVault.wallets.length > newVault.wallets.length', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('vault').returns(localVault1);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj1);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage');

    const inputFile = readFileSync('test/app/vaultFile/UTC-1541706253997_vault', {
      encoding: 'utf8',
    });

    const vaultOutput = await VaultService.importVaultService(inputFile, password, token);
    assert(vaultOutput.wallets.length === 9, 'Number of wallets should be as per expected');
    assert(
      vaultOutput.wallets[2].alias === 'BlockX Wallet',
      'It should not rename existing wallet',
    );
    assert(
      vaultOutput.wallets[6].alias === 'Wallet 1-2',
      'Renaming of wallet with duplicate alias should be as per expected',
    );
    assert(
      vaultOutput.wallets[7].alias === 'Wallet 2-2',
      'Renaming of wallet with duplicate alias should be as per expected',
    );
    assert(
      vaultOutput.wallets[8].alias === 'Wallet 3',
      'It should not rename is there is no duplicate alias',
    );
    assert.equal(
      stubSetLocalStorage.getCall(1).args[1],
      txn1Expected,
      'The transaction object should be modified as expected',
    );
    stub.restore();
    stubSetLocalStorage.restore();
  });
  it('merging distinct vaults currentVault.wallets.length < newVault.wallets.length', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('vault').returns(localVault2);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj2);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage').returns({});

    const inputFile = readFileSync('test/app/vaultFile/UTC-1541691708124_vault', {
      encoding: 'utf8',
    });

    const vaultOutput = await VaultService.importVaultService(inputFile, password, token);
    assert(vaultOutput.wallets.length === 9, 'Number of wallets should be as per expected');
    assert(
      vaultOutput.wallets[3].alias === 'Wallet 1-2',
      'Renaming of wallet with duplicate alias should be as per expected',
    );
    assert(
      vaultOutput.wallets[4].alias === 'Wallet 2-2',
      'Renaming of wallet with duplicate alias should be as per expected',
    );
    assert(
      vaultOutput.wallets[8].alias === 'Wallet 6',
      'Renaming of wallet with duplicate alias should be as per expected',
    );
    assert.equal(
      stubSetLocalStorage.getCall(1).args[1],
      txn2Expected,
      'The transaction object should be modified as expected',
    );
    stub.restore();
    stubSetLocalStorage.restore();
  });
  it('merging a vault(having imported vaults within) to existing vault', async () => {
    const getLocalStorageStub = sinon.stub(browserService, 'getLocalStorage');
    getLocalStorageStub.withArgs('vault').returns(localVault);
    getLocalStorageStub.withArgs('transactions').returns(transactionsLocalStorageObj);
    const setLocalStorageStub = sinon.stub(browserService, 'setLocalStorage');
    const inputFile = readFileSync('test/app/vaultFile/UTC-1542134614795_vault', {
      encoding: 'utf8',
    });
    const vaultOutput = await VaultService.importVaultService(inputFile, password, token);
    assert.equal(vaultOutput.wallets.length, 8, 'Number of accounts should be as expected');
    const cipher = jc.retrocycle(JSON.parse(setLocalStorageStub.getCall(0).args[1]));
    const bytes = CryptoJS.AES.decrypt(cipher, token);
    const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    const decryptedVaultOutput = JSON.parse(plaintext);
    assert(
      _.isEqual(
        decryptedVaultOutput,
        walletsMerginVault,
        'The wallets store should be as expected',
      ),
    );
    assert.equal(
      setLocalStorageStub.getCall(1).args[1],
      txnExpectedMergingVault,
      'The transaction store should be as expected',
    );
    setLocalStorageStub.restore();
    getLocalStorageStub.restore();
  });
  it('merging vault(having imported vault) with existing vault(having imported vault)', async () => {
    const getLocalStorageStub = sinon.stub(browserService, 'getLocalStorage');
    getLocalStorageStub.withArgs('vault').returns(localVault3);
    getLocalStorageStub.withArgs('transactions').returns(transactionsLocalStorageObj3);
    const setLocalStorageStub = sinon.stub(browserService, 'setLocalStorage');
    const inputFile = readFileSync('test/app/vaultFile/UTC-1542144254534_vault', {
      encoding: 'utf8',
    });
    const vaultOutput = await VaultService.importVaultService(inputFile, password, token);
    assert(
      _.isEqual(vaultOutput, walletsMerginVault3),
      'The vault storage should be modifed as expected',
    );
    getLocalStorageStub.restore();
    setLocalStorageStub.restore();
  });
});

describe('#createWallet()', () => {
  it('Create Wallet using SeedWord ', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');

    stub.withArgs('vault').returns(localVault);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage');

    const vaultOutput = await VaultService.createWallet(token, 'SeedWordsBased', {
      useSeedWords: true,
    });
    /* eslint-disable-next-line */
    assert.equal(3, vaultOutput.wallets.length, 'length of the wallets must be as expected');

    assert(
      'Address of the output must be same as epxected of New Wallet 3',
      vaultOutput.wallets[2].address
        === '0xa0d673a1e79ba0731b54b3b0227c99a4a5857b0a36cb3f2a5e6ac16d3fd356bc',
    );
    assert.equal(
      'board hour antique dignity night clinic toward neck ask lucky lonely eye',
      vaultOutput.seedWords,
      'Seed words must be retrieved correctly',
    );
    assert.equal(
      stubSetLocalStorage.getCall(1).args[1],
      txnsExpectedForCreateWalletSeedWords,
      'The transaction object should be modified as expected',
    );
    stub.restore();
    stubSetLocalStorage.restore();
  });
});

describe('#createWallet()', () => {
  it('Create Wallet using Privatekey', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');

    stub.withArgs('vault').returns(localVault);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage');
    const privateKey = '336c5c68d75010d738f620fb21a04cc56234d76a7b5d9ca3088708f1c45b3161a75d1c6e59833fad80ba02cc8010c4a99787a0859941613a7ccadf9c51c15c3a';
    const vaultOutput = await VaultService.createWallet(token, 'PrivateKeyBased', {
      privateKey,
    });
    /* eslint-disable-next-line */
    assert.equal(3, vaultOutput.wallets.length, 'length of the wallets must be as expected');
    assert(
      vaultOutput.wallets[2].address
        === '0xa0130e8bef33916c224f8b45b32bff5ffc5ccff1b875cf7606fdcb620aa9e0f0',
      'Address of the output must be same as epxected of New Wallet 3',
    );
    assert.equal(
      'board hour antique dignity night clinic toward neck ask lucky lonely eye',
      vaultOutput.seedWords,
      'Seed words must be retrieved correctly',
    );
    assert.equal(
      stubSetLocalStorage.getCall(1).args[1],
      txnsExpectedForCreateWalletPrivateKey,
      'The transaction object should be modified as expected',
    );
    stub.restore();
    stubSetLocalStorage.restore();
  });
});

describe('#createWallet()', () => {
  it('Create Wallet using Privatekey with 0x', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');

    stub.withArgs('vault').returns(localVault);
    stub.withArgs('transactions').returns(transactionsLocalStorageObj);
    const stubSetLocalStorage = sinon.stub(browserService, 'setLocalStorage');

    const privateKey = '0x336c5c68d75010d738f620fb21a04cc56234d76a7b5d9ca3088708f1c45b3161a75d1c6e59833fad80ba02cc8010c4a99787a0859941613a7ccadf9c51c15c3a';
    const vaultOutput = await VaultService.createWallet(token, 'PrivateKeyBased', {
      privateKey,
    });
    /* eslint-disable-next-line */
    assert.equal(3, vaultOutput.wallets.length, 'length of the wallets must be as expected');
    assert(
      vaultOutput.wallets[2].address
        === '0xa0130e8bef33916c224f8b45b32bff5ffc5ccff1b875cf7606fdcb620aa9e0f0',
      'Address of the output must be same as epxected of New Wallet 3',
    );
    assert.equal(
      'board hour antique dignity night clinic toward neck ask lucky lonely eye',
      vaultOutput.seedWords,
      'Seed words must be retrieved correctly',
    );
    assert.equal(
      stubSetLocalStorage.getCall(1).args[1],
      txnsExpectedForCreateWalletPrivateKey,
      'The transaction object should be modified as expected',
    );
    stub.restore();
    stubSetLocalStorage.restore();
  });
});

describe('#signInService()', () => {
  it('unlock the application using password', async () => {
    const stub = sinon.stub(browserService, 'getLocalStorage');
    stub.withArgs('state').returns({ state: encState });
    stub.withArgs('vault').returns(localVault);
    const sendMessageStub = sinon.stub(browserService, 'sendMessage');
    const decryptedStateOutput = await VaultService.signInService(password);
    assert.equal(decryptedState, JSON.stringify(decryptedStateOutput), 'correct Password');
    assert(
      _.isEqual(sendMessageStub.getCall(0).args[0], updatekeyExpected),
      'The key should be updated',
    );
    stub.restore();
    sendMessageStub.restore();
  });
});

describe('#updateVault()', () => {
  it('stored new  wallet alias to local vault storage', async () => {
    const getLocalStorageStub = sinon.stub(browserService, 'getLocalStorage');
    getLocalStorageStub.withArgs('vault').returns(localVault);
    const setLocalStorageStub = sinon.stub(browserService, 'setLocalStorage');
    await VaultService.updateVault(wallets, token);
    const cipher = jc.retrocycle(JSON.parse(setLocalStorageStub.getCall(0).args[1]));
    const bytes = CryptoJS.AES.decrypt(cipher, token);
    const plaintext = bytes.toString(CryptoJS.enc.Utf8);
    const decryptedVaultOutput = JSON.parse(plaintext);
    assert.equal(
      wallet2.alias,
      decryptedVaultOutput.wallets[1].alias,
      'It should rename the wallet in local storage',
    );
    decryptedVaultOutput.wallets.forEach(wallet => {
      if (
        decryptedVaultOutput.currentWallet
        && wallet.privateKey === decryptedVaultOutput.currentWallet.privateKey
      ) {
        assert(
          _.isEqual(wallet, decryptedVaultOutput.currentWallet),
          'It should modify current wallet',
        );
      }
    });
    getLocalStorageStub.restore();
    setLocalStorageStub.restore();
  });
});

describe('#storeHashKeyToHandleSeedWords()', () => {
  it('store hash key and send message', async () => {
    const sendMessageStub = sinon.stub(browserService, 'sendMessage');
    await VaultService.storeHashKeyToHandleSeedWords(password);
    assert(
      _.isEqual(sendMessageStub.getCall(0).args[0], updatekeyExpected),
      'The key should be updated',
    );
    sendMessageStub.restore();
  });
});
